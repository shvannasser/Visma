@page "/"
@using System.ComponentModel.DataAnnotations;
@using VismasLoanCalculator.Enums;
@using VismasLoanCalculator.Interface
@using VismasLoanCalculator.Models
@inject NavigationManager NavigationManager
@inject ILoanCalculatorFactory loanCalculatorFactory

<h1>Loan Calculator</h1>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-warning" role="alert">
        @ErrorMessage
    </div>
}

@if (!scheduleGenerated)
{
    <EditForm Model="@loanInputModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="loanCategory">Loan Category:</label>
            <select @bind="@loanInputModel.LoanCategory" class="form-control">
                @foreach (var category in Enum.GetValues(typeof(LoanCategory)))
                {
                    <option value="@category.ToString()">@category</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="loanType">Type of Loan:</label>
            <select @bind="@loanInputModel.LoanType" class="form-control">
                <option value="Serial">Serial Loan</option>
                <option value="Annuity">Annuity Loan</option>
            </select>
        </div>

        <div class="form-group">
            <label for="amount">Loan Amount:</label>
            <InputNumber id="amount" class="form-control" @bind-Value="@loanInputModel.Amount" />
        </div>

        <div class="form-group">
            <label for="term">Loan Term (Years):</label>
            <InputNumber id="term" class="form-control" @bind-Value="@loanInputModel.TermInYears" />
        </div>

        <button type="submit" class="btn btn-primary button-spacing">Calculate</button>
    </EditForm>
}

@if (MonthlyPayment != null && MonthlyPayment.Any())
{
    <div>
        <div class="d-flex justify-content-between align-items-center schedule-header">
            <h2>Repayment Schedule</h2>
            <button class="btn btn-primary" @onclick="ResetForm">Change Values</button>

        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Principal Payment</th>
                    <th>Interest Payment</th>
                    <th>Total Payment</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var payment in MonthlyPayment)
                {
                    <tr>
                        <td>@payment.Month</td>
                        <td>
                            @payment.PrincipalPayment.ToString("N2")
                        </td>
                        <td>@payment.InterestPayment.ToString("N2")</td>
                        <td>@payment.TotalPayment.ToString("N2")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private LoanInputModel loanInputModel = new LoanInputModel();
    public IEnumerable<MonthlyPaymentModel> MonthlyPayment { get; set; }
    public string ErrorMessage { get; set; }
    private bool scheduleGenerated = false;

    private void HandleValidSubmit()
    {
        ErrorMessage = null;

        if (loanInputModel.LoanType == "Annuity" || loanInputModel.LoanCategory == LoanCategory.Car)
        {
            ErrorMessage = "The selected loan type or category is not yet implemented.";
            MonthlyPayment = null;
            scheduleGenerated = false;
        }
        else
        {
            try
            {
                ILoanCalculator loanCalculator = loanCalculatorFactory.Create(loanInputModel.LoanCategory, loanInputModel.LoanType);
                MonthlyPayment = loanCalculator.GenerateRepaymentSchedule(loanInputModel);
                scheduleGenerated = MonthlyPayment != null && MonthlyPayment.Any();
            }
            catch (Exception ex)
            {
                ErrorMessage = $"An error occurred while calculating the loan: {ex.Message}";
                MonthlyPayment = null;
                scheduleGenerated = false;
            }
        }
        StateHasChanged();
    }
    private void ResetForm()
    {
        loanInputModel = new LoanInputModel();
        scheduleGenerated = false;
        ErrorMessage = null;
        MonthlyPayment = null;
    }
}
